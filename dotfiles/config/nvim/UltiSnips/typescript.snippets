snippet fun "Function"
function ${1:function_name}(${2:argument}) {
	${VISUAL}$0
}
endsnippet

snippet fn "Arrow function"
($1) => {
	$2
}
endsnippet

snippet im "Require"
import ${1:module_name} from "${2:module_path}"
endsnippet

snippet ex "Export default"
export default $1
endsnippet

snippet cl "console.log()"
;(console).log(${1:"${2:string}"})
endsnippet

snippet cw "console.warn()"
;(console).warn(${1:"${2:string}"})
endsnippet

snippet ce "console.error()"
;(console).error(${1:"${2:string}"})
endsnippet

snippet int "Interface"
interface ${1:InterfaceName} {
	${2:${3:propertyName}: ${4:any}}
}
endsnippet

snippet describe "mocha describe"
describe("${1:thing}", () => {
	${2}
})
endsnippet

snippet it "mocha it"
it("${1:should ${2:...}}", () => {
	${3}
})
endsnippet

snippet react "React functional component"
import * as React from "react"

interface Props {
	${2:children: any}
}

export default function ${1:ComponentName}(props: Props) {
	return (
		<div>TODO</div>
	)
}
endsnippet

snippet reactcs "React class component with state"
import * as React from "react"

interface Props {
	${2:children: any}
}

interface State {
	value: any
}

export default class ${1:ComponentName} extends React.Component<Props, State> {
	constructor(props: Props) {
		super(props)

		this.state = {
			value: null,
		}
	}

	public render() {
		return (
			<div>TODO</div>
		)
	}
}
endsnippet

snippet reactpc "React pure class component"
import * as React from "react"

interface Props {
	${2:children: any}
}

export default class ${1:ComponentName} extends React.PureComponent<Props> {
	public render() {
		return (
			<div>TODO</div>
		)
	}
}
endsnippet

snippet reactpcs "React pure class component with state"
import * as React from "react"

interface Props {
	${2:children: any}
}

interface State {
	value: any
}

export default class ${1:ComponentName} extends React.PureComponent<Props, State> {
	constructor(props: Props) {
		super(props)

		this.state = {
			value: null
		}
	}

	public render() {
		return (
			<div>TODO</div>
		)
	}
}
endsnippet

snippet notnull "not null function"
function notNull<T>(maybeNull: T | null): maybeNull is T {
	return maybeNull !== null
}
endsnippet

snippet stc "styled-component"
const ${1:Component} = styled.${2:div}\`
	${3:display: flex;}
\`
endsnippet
