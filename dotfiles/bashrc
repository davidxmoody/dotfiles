# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
HISTCONTROL="erasedups:ignoreboth"
export HISTIGNORE="&:[ ]*:exit:ls:bg:fg:history:clear"
HISTTIMEFORMAT='%F %T '

# append to the history file, don't overwrite it
shopt -s histappend

# Save multi-line commands as one command
shopt -s cmdhist

# Correct spelling errors during tab-completion
shopt -s dirspell 2> /dev/null

# Automatically trim long paths in the prompt
PROMPT_DIRTRIM=2

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=5000
HISTFILESIZE=10000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# Custom less options
export LESS=RSci

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# Autocompletion for all existing aliases sourced at end of bashrc), from:
# http://superuser.com/questions/436314/how-can-i-get-bash-to-perform-tab-completion-for-my-aliases

# Automatically add completion for all aliases to commands having completion functions
function alias_completion {
  local namespace="alias_completion"

  # parse function based completion definitions, where capture group 2 => function and 3 => trigger
  local compl_regex='complete( +[^ ]+)* -F ([^ ]+) ("[^"]+"|[^ ]+)'
  # parse alias definitions, where capture group 1 => trigger, 2 => command, 3 => command arguments
  local alias_regex="alias ([^=]+)='(\"[^\"]+\"|[^ ]+)(( +[^ ]+)*)'"

  # create array of function completion triggers, keeping multi-word triggers together
  eval "local completions=($(complete -p | sed -Ene "/$compl_regex/s//'\3'/p"))"
  (( ${#completions[@]} == 0 )) && return 0

  # create temporary file for wrapper functions and completions
  rm -f "/tmp/${namespace}-*.tmp" # preliminary cleanup
  local tmp_file; tmp_file="$(mktemp "/tmp/${namespace}-${RANDOM}XXX.tmp")" || return 1

  local completion_loader; completion_loader="$(complete -p -D 2>/dev/null | sed -Ene 's/.* -F ([^ ]*).*/\1/p')"

  # read in "<alias> '<aliased command>' '<command args>'" lines from defined aliases
  local line; while read line; do
    eval "local alias_tokens; alias_tokens=($line)" 2>/dev/null || continue # some alias arg patterns cause an eval parse error
    local alias_name="${alias_tokens[0]}" alias_cmd="${alias_tokens[1]}" alias_args="${alias_tokens[2]# }"

    # skip aliases to pipes, boolan control structures and other command lists
    # (leveraging that eval errs out if $alias_args contains unquoted shell metacharacters)
    eval "local alias_arg_words; alias_arg_words=($alias_args)" 2>/dev/null || continue
    # avoid expanding wildcards
    read -a alias_arg_words <<< "$alias_args"

    # skip alias if there is no completion function triggered by the aliased command
    if [[ ! " ${completions[*]} " =~ " $alias_cmd " ]]; then
      if [[ -n "$completion_loader" ]]; then
        # force loading of completions for the aliased command
        eval "$completion_loader $alias_cmd"
        # 124 means completion loader was successful
        [[ $? -eq 124 ]] || continue
        completions+=($alias_cmd)
      else
        continue
      fi
    fi
    local new_completion="$(complete -p "$alias_cmd")"

    # create a wrapper inserting the alias arguments if any
    if [[ -n $alias_args ]]; then
      local compl_func="${new_completion/#* -F /}"; compl_func="${compl_func%% *}"
      # avoid recursive call loops by ignoring our own functions
      if [[ "${compl_func#_$namespace::}" == $compl_func ]]; then
        local compl_wrapper="_${namespace}::${alias_name}"
        echo "function $compl_wrapper {
          (( COMP_CWORD += ${#alias_arg_words[@]} ))
          COMP_WORDS=($alias_cmd $alias_args \${COMP_WORDS[@]:1})
          (( COMP_POINT -= \${#COMP_LINE} ))
          COMP_LINE=\${COMP_LINE/$alias_name/$alias_cmd $alias_args}
          (( COMP_POINT += \${#COMP_LINE} ))
          $compl_func
        }" >> "$tmp_file"
        new_completion="${new_completion/ -F $compl_func / -F $compl_wrapper }"
      fi
    fi

    # replace completion trigger by alias
    new_completion="${new_completion% *} $alias_name"
    echo "$new_completion" >> "$tmp_file"
  done < <(alias -p | sed -Ene "s/$alias_regex/\1 '\2' '\3'/p")
  source "$tmp_file" && rm -f "$tmp_file"
}

# Custom prompt (with git support)
git_status() {
  local branch
  if branch=$(git rev-parse --abbrev-ref HEAD 2> /dev/null); then
    if [[ "$branch" == "HEAD" ]]; then
      echo '(DETACHED*) '
      return
    fi

    # Save space by abbreviating the most common branch name
    [[ "$branch" == "master" ]] && branch="m"

    local status=$(git status --porcelain 2> /dev/null)
    local status_indicator=''
    [[ "$status" != "" ]] && status_indicator='*'

    local commits_behind=$(git rev-list --count HEAD..@{upstream} 2>/dev/null)
    local commits_ahead=$(git rev-list --count @{upstream}..HEAD 2>/dev/null)
    local stashes_count=$(git stash list 2>/dev/null | wc -l)
    local commits_indicator=''
    [[ "$commits_ahead" -gt 0 ]] && commits_indicator="${commits_indicator}+${commits_ahead}"
    [[ "$commits_behind" -gt 0 ]] && commits_indicator="${commits_indicator}-${commits_behind}"
    [[ "$stashes_count" -gt 0 ]] && commits_indicator="${commits_indicator}#${stashes_count}"

    echo "(${branch}${commits_indicator}${status_indicator}) "
  fi
}

jobs_status() {
  local last_job_num=$(jobs | tail -n1 | cut -f1 -d'+') 
  if [[ ! -z "$last_job_num" ]]; then
    echo "$last_job_num "
  else
    echo ""
  fi
}

node_version() {
  local ver=$(node --version | sed 's/^[^1-9]*\([1-9][0-9]*\).*$/\1/')
  [[ "$ver" -ne "6" ]] && echo "$ver "
}

get_friendly_name() {
  sed "
    s%^/$%ROOT%;
    s%^$HOME$%HOME%;
    s%^$TMP_DIR\\(/\\)\\?.*$%TMP\1%;
    s%^$P_DIR$%P_DIR%;
    s%^$P_DIR/\\([^/]\\+\\)\\(/\\)\\?.*$%\\U\\1\\2%;
    s%^/\\([^/]\\+\\)\\(/[^/]\\+\\)\\(/\\)\\?.*$%/\\1\\2\\3%;
  " <<< "${1:-$PWD}"
}

update_tmux_window() {
  tmux rename-window "$(get_friendly_name)" >/dev/null 2>/dev/null
}

PS1='$(update_tmux_window)\[\033]0;\w\007\]\[\e[0;31m\]\w \[\e[0;32m\]$(node_version)\[\e[0;33m\]$(git_status)\[\e[0;92m\]$(jobs_status)\[\e[0m\]'
PS2='\[\e[0;31m\]>\[\e[0m\] '

# Sorting order
export LC_COLLATE=C

# Set some custom frequently used directories
export P_DIR="$HOME/p"
export RC_DIR="$P_DIR/dotfiles"
export TMP_DIR="$HOME/tmp"
export SYNC_DIR="$HOME/sync"
export DBOX="$HOME/.dbox/Dropbox"
export DIARY_DIR="$HOME/sync/diary-data"

# EDITOR
export EDITOR=nvim

# NVM
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"

# NPM
NPM_PACKAGES="$HOME/.npm-packages"
if [ -d "$NPM_PACKAGES" ]; then
  # export NPM_PACKAGES
  export NODE_PATH="$NPM_PACKAGES/lib/node_modules:$NODE_PATH"
  export PATH="$NPM_PACKAGES/bin:$PATH"
  # unset MANPATH
  # export MANPATH="$NPM_PACKAGES/share/man:$(manpath)"
fi

# Add custom bin dir to PATH
[ -d "$RC_DIR/bin" ] && export PATH="$RC_DIR/bin:$PATH"

# Android SDK
export ANDROID_HOME=$P_DIR/android-sdk-linux
[ -d "$ANDROID_HOME" ] && export PATH="$ANDROID_HOME/platform-tools:$ANDROID_HOME/tools:$PATH"

# Alias definitions
[ -f ~/.bash_aliases ] && source ~/.bash_aliases

# Alias completion for all aliases defined in ~/.bash_aliases
alias_completion

# Diary aliases come here because alias_completion doesn't like them
alias diary='~/sync/old-projects/diary/rundiary -b $DIARY_DIR'

[ -f ~/.fzf.bash ] && source ~/.fzf.bash

# Don't load ranger config twice
export RANGER_LOAD_DEFAULT_RC=FALSE

# Launch tmux if not already in tmux
[ -z "$TMUX" ] && echo "Launching tmux..." && tmux
