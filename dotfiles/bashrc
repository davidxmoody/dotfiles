# History settings ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

HISTSIZE=1000000
HISTFILESIZE=1000000
HISTCONTROL="erasedups:ignoreboth"
HISTIGNORE="&:[ ]*:exit:ls:bg:fg:clear:u:b"
HISTTIMEFORMAT="%F %T "
shopt -s histappend
shopt -s cmdhist

# Misc options ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

shopt -s checkwinsize
shopt -s globstar
shopt -s nocaseglob
PROMPT_DIRTRIM=3
export LESS=RSci
export LC_COLLATE=C
export EDITOR=nvim

# Bash prompt ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

arrow_char=$'\uE0B0'

__prompt_command() {
  local last_exit_status="$?"
  local last_job_num="$(jobs | tail -n1 | cut -f1 -d"+")"

  if [ -n "$TMUX" ]; then
    tmux select-pane -T "$(tmux-get-pane-title)"
  fi

  local git_status="$(git-short-status)"
  if [ ! -z "$last_job_num" ]; then
    git_status+=" $last_job_num"
  fi

  local venv=""
  if [[ ! -z "$VIRTUAL_ENV" ]]; then
    if [[ "$PWD" =~ "${VIRTUAL_ENV%/.venv}"* ]]; then
      venv=" (VENV)"
    else
      venv=" ($VIRTUAL_ENV_PROMPT)"
    fi
  fi

  local color_bg_1="0"
  local color_fg_1="7"

  local color_bg_2="4"
  local color_fg_2="0"

  if [ "$last_exit_status" -ne "0" -a "$last_exit_status" -ne "130" ]; then
    color_bg_2="1"
  fi

  local new_ps1=
  new_ps1+="\[\e[4${color_bg_1}m\e[3${color_fg_1}m\]"
  new_ps1+=" \w "
  new_ps1+="\[\e[0m\e[4${color_bg_2}m\e[3${color_bg_1}m\]"
  new_ps1+="$arrow_char"
  new_ps1+="\[\e[3${color_fg_2}m\]"
  new_ps1+="$venv"
  new_ps1+=" $git_status "
  new_ps1+="\[\e[0m\e[3${color_bg_2}m\]"
  new_ps1+="$arrow_char"
  new_ps1+="\[\e[0m\]"
  new_ps1+=" "

  PS1="$new_ps1"
}

PROMPT_COMMAND=__prompt_command

PS2="\[\e[30m\]$arrow_char\[\e[0m\] "

# Common dirs/files ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

export P_DIR="$HOME/p"
export RC_DIR="$P_DIR/dotfiles"
export TMP_DIR="$HOME/t"

# Path stuff ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

add_to_path() {
  if [[ -d "$1" && ":$PATH:" != *":$1:"* ]]; then
    PATH="$1${PATH:+":$PATH"}"
  fi
}

export MANPATH=
add_to_manp() {
  if [[ -d "$1" && ":$MANPATH:" != *":$1:"* ]]; then
    MANPATH="$1:${MANPATH}"
  fi
}

add_to_path "/opt/homebrew/bin"

add_to_path "/usr/local/opt/coreutils/libexec/gnubin"
add_to_manp "/usr/local/opt/coreutils/libexec/gnuman"
add_to_path "/opt/homebrew/opt/coreutils/libexec/gnubin"
add_to_manp "/opt/homebrew/opt/coreutils/libexec/gnuman"

add_to_path "/usr/local/opt/findutils/libexec/gnubin"
add_to_manp "/usr/local/opt/findutils/libexec/gnuman"
add_to_path "/opt/homebrew/opt/findutils/libexec/gnubin"
add_to_manp "/opt/homebrew/opt/findutils/libexec/gnuman"

add_to_path "/usr/local/opt/gnu-sed/libexec/gnubin"
add_to_manp "/usr/local/opt/gnu-sed/libexec/gnuman"
add_to_path "/opt/homebrew/opt/gnu-sed/libexec/gnubin"
add_to_manp "/opt/homebrew/opt/gnu-sed/libexec/gnuman"

export N_PREFIX="$HOME/.n"
add_to_path "$N_PREFIX/bin"

add_to_path "$RC_DIR/bin"
add_to_path "$HOME/.bin"
add_to_path "$HOME/.local/bin"

export RIPGREP_CONFIG_PATH="$HOME/.ripgreprc"

export POETRY_CONFIG_DIR="$HOME/.config/pypoetry"

# Source other files ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

source_if_exists() {
  [ -f "$1" ] && source "$1"
}

source_if_exists "$HOME/.bash_aliases"

source_if_exists "/opt/homebrew/opt/fzf/shell/key-bindings.bash"
export FZF_DEFAULT_COMMAND="rg --files --sortr=modified"
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

source_if_exists "$HOME/.bashrc-local"
