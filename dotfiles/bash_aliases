# Vim ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

type nvim 2> /dev/null > /dev/null && alias vim='nvim'
alias v='nvim'
alias vv='(cd "$RC_DIR" && nvim "dotfiles/config/nvim/init.vim")'
alias vb='(cd "$RC_DIR" && nvim "dotfiles/bash_aliases")'

# Tmux ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

if type tmux-next 2> /dev/null > /dev/null; then
  alias tmux='tmux-next -f "$HOME/.tmux.conf"'
else
  alias tmux='tmux -f "$HOME/.tmux.conf"'
fi

# List ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

alias u='ls -FCBH --group-directories-first --color=auto --hide node_modules'
alias uu='u -A'
alias ur='u -R'
alias ll='ls -FBH -l --color=auto'
alias lt='ll -t'

# Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

search_project_dir() {
  local initial_dir=${1%/}
  if [ ! -z "$initial_dir" -a -d "$P_DIR/$initial_dir" ]; then
    echo "$P_DIR/$initial_dir"
  else
    local chosen_dir=$(ls -1 $P_DIR | fzf --select-1 --query "$initial_dir" --preview "git --git-dir='$P_DIR/{}/.git' --work-tree='$P_DIR/{}' status -sb -uall")
    [ ! -z "$chosen_dir" ] && echo "$P_DIR/$chosen_dir"
  fi
}

p() {
  local chosen_dir=$(search_project_dir "$1")
  cd "$chosen_dir"
}

mkcd() { mkdir "$@" && cd "$@"; }

mkalias() {
  # Flatten arguments into one string
  local full_string=$*

  # Extract the first and last parts
  local alias_name=${full_string%%=*}
  local alias_result=${full_string#*=}

  # Construct the new command
  local alias_command="alias $alias_name='$alias_result'"

  # Execute the command, if successful then print
  # out the alias and add it to ~/.bash_aliases
  eval "$alias_command" && \
  alias "$alias_name" | tee -a "$HOME/.bash_aliases"
}

mkbash() {
  echo -e "#!/usr/bin/env bash\n\nset -e\n\n" > "$1" && \
  chmod +x "$1" && \
  nvim + +startinsert "$1"
}

export SCRIPTS_DIR=$HOME/.ad-hoc-scripts

mkscript() {
  mkdir -p "$SCRIPTS_DIR"
  mkbash "$SCRIPTS_DIR/$(date +%F-%H-%M-%S)-${1-unnamed}"
}

editscript() {
  local script_file=$(ls -r1 "$SCRIPTS_DIR" | fzf --select-1 --query "$1")
  [ -n "$script_file" ] && v "$SCRIPTS_DIR/$script_file"
}

runscript() {
  local script_file=$(ls -r1 "$SCRIPTS_DIR" | fzf --select-1 --query "$1")
  shift
  [ -n "$script_file" ] && "$SCRIPTS_DIR/$script_file" "$@"
}

watchscript() {
  local script_file=$(ls -r1 "$SCRIPTS_DIR" | fzf --select-1 --query "$1")
  [ -n "$script_file" ] && entr -c "$SCRIPTS_DIR/$script_file" <<< "$SCRIPTS_DIR/$script_file"
}

mkp() {
  if [ -z "$1" ]; then
    echo "Error: Please enter a project name"
    return 1
  fi

  if [ -e "$P_DIR/$1" ]; then
    echo "Error: Project already exists: \"$P_DIR/$1\""
    return 1
  fi

  mkdir -p "$P_DIR/$1"
  cd "$P_DIR/$1"
  git init
}

mkpn() {
  mkp "$@" && \
  echo "node_modules/" > .gitignore && \
  npm init --yes
}

# Git ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

alias g='git'
alias gs='git status -sb -uall'
alias gc='git commit'
gl() {
  if git rev-parse @{u} 2>/dev/null 1>/dev/null; then
    git lg @ @{u} "$@"
  else
    git lg "$@"
  fi
}
glp() {
  p "$@" && pwd && gl && cd - >/dev/null
}
alias gd='git diff -- ":(top)" ":(exclude,top)package-lock.json"'
alias gdc='git diff --cached -- ":(top)" ":(exclude,top)package-lock.json"'
ga() {
  if [[ $# == 0 ]]; then
    (
      cd "$(git rev-parse --show-toplevel)" && \
      git status -sb -uall | \
      fzf --ansi --header-lines=1 --multi | \
      sed 's/^.. //' | \
      xargs -d '\n' git add
    )
  else
    git add "$@"
  fi
}
alias gaa='git add -A :/'
alias gaac='git add -A :/ && git commit'
alias gaaca='git add -A :/ && git commit --amend'
alias gaacane='git add -A :/ && git commit --amend --no-edit'
alias gco='git checkout'
alias gcop='git checkout --patch'
alias gcm='git checkout master'
alias gm='git merge'
alias gff='git merge --ff-only'
alias gf='git fetch origin --prune && git --no-pager lg @{upstream} ^HEAD'
alias gpl='git pull && git --no-pager lg HEAD@{1}..'
alias gps='git push'
alias gpsa='git push --all'
alias gpsat='git push --all --follow-tags'
alias gr='git rebase'
alias gri='git rebase -i @{u}'
alias gst='git stash'
alias gstu='git stash save -u'
alias gstp='git stash pop'
alias gsta='git stash apply'
alias gsts='git stash show -p'
alias gstd='git stash drop'
alias glm='git lg --author="David Moody"'
alias gdp='git diff ORIG_HEAD -- package.json'
alias groot='cd "$(git rev-parse --show-toplevel)"'
alias gitcountdiff='git --no-pager diff --color=never | grep -v -E "^(\+\+\+|---) "| grep -E "^(-|\+)" | count'
alias gitcopydiff='git --no-pager diff --color=never | copy'
alias gw='git show -- ":(top)" ":(exclude,top)package-lock.json"'
alias gy='git-show-yesterday'
alias gyy='git-projects-recent-commits'
alias gg='git-fetch-all-projects'
alias ggh='cat "$HOME/.fetch-all-projects-history/$(ls $HOME/.fetch-all-projects-history | tail -n1)"'

ggl() {
  (
    local dir=${1-$P_DIR}
    dir=${dir%/}

    for gr in "$dir"/*/.git; do
      local proj_dir="${gr%/.git}"
      cd "$proj_dir"
      echo "$(git-short-status)	$(tmux-get-window-name "$proj_dir")" | expand -t8
    done
  )
}

gclone() {
  local git_repo=$1
  local project_dir=${2-p}
  [ -z "$git_repo" ] && echo "Please enter the name of a git repository" && return 1

  (
    cd "$HOME/${project_dir}" && \
      git clone git@bitbucket.org:candide-garden-app/${git_repo}.git
  ) && cd "$HOME/${project_dir}/${git_repo}"
}

fetch_repo_list() {
  curl https://api.github.com/users/davidxmoody/repos 2>/dev/null | \
    ramda --unslurp "pluck('name')" | \
    sed 's/"//g' > ~/.github-repos
}

clone() {
  if [ -z "$(find ~/.github-repos -mtime -3 2>/dev/null)" ]; then
    echo "Re-fetching repo list from GitHub..."
    fetch_repo_list
  fi

  local repo=$(cat ~/.github-repos | fzf --select-1 --query "$*")

  if [ -n "$repo" ]; then
    if [ ! -d "$P_DIR/$repo" ]; then
      git clone --config "user.email=david@davidxmoody.com" "git@github.com:davidxmoody/${repo}.git" "$P_DIR/$repo"
    fi

    cd "$P_DIR/$repo"
  fi
}

# cd shortcuts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

alias up='cd ..'
alias upp='cd ../..'
alias uppp='cd ../../..'
alias b='cd - >/dev/null'
alias cdp='cd $P_DIR'
alias cdt='cd $TMP_DIR'
alias cddb='cd $DBOX'

# npm ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

alias npmls='npm ls --depth=0'
alias ni='npm install'
alias nu='npm uninstall'
alias nid='npm install --save-dev'
alias nud='npm uninstall --save-dev'
alias nig='npm install -g'
alias nug='npm uninstall -g'
alias nr='npm run'
alias ns='npm start'
alias nb='npm run build'
alias nverp='npm version patch'
alias nverm='npm version minor'
alias nc='npm-check -u'

# Navy ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

alias nvd='navy develop'
alias nvu='navy update'
alias nvl='navy live'
alias nvp='navy ps'
alias nv='navy'

# Diary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

alias cdd='cd $DIARY_DIR'
alias dn='diary-new'
alias de='diary-edit'
alias dl='diary-list'

# Misc ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

alias ag='ag --smart-case'
alias dus='du -Dhs'
alias dun='du -Ds node_modules/{@*/*,*} | sort -nr'
alias df='df -hT'
alias op='xdg-open'
type open 2>/dev/null >/dev/null && alias op='open'
alias mkdir='mkdir -p'
removekernels() { sudo apt-get remove --purge $(dpkg -l 'linux-*' | sed '/^ii/!d;/'"$(uname -r | sed "s/\(.*\)-\([^0-9]\+\)/\1/")"'/d;s/^[^ ]* [^ ]* \([^ ]*\).*/\1/;/[0-9]/!d'); }
alias ins='sudo apt-get install'
alias uns='sudo apt-get remove'
alias xclip='xclip -selection clipboard'
alias getclip='xclip -selection clipboard -o'
alias wrstats="grep '^m' ~/.workrave/historystats | rev | cut -d' ' -f 2 | rev | tail -n20"
alias gpgc='gpg -c --cipher-algo AES256'
alias ports='netstat -tulpn'
alias cleanupdocker='docker rmi $(docker images -qf dangling=true)'
alias restartwifi='sudo service network-manager restart'
alias echopath='echo $PATH | sed "s/:/\n/g"'
alias mochaw='./node_modules/.bin/_mocha -w'
alias stripjpg='exiftool -all= '
alias android-proxy='adb reverse tcp:8097 tcp:8097; adb reverse tcp:8081 tcp:8081'
alias rndebug='open "rndebugger://set-debugger-loc?host=localhost&port=8081"'
alias wcl='wc -l'
alias bashal='source ~/.bash_aliases'
alias bashtimestamps='grep "^#" ~/.bash_history | sed "s/#//" | sort -n'
alias ff='prettier-changed'
alias ramdam='ramda --import m=moment'
alias launchemulator='( cd ~/Library/Android/sdk/tools && ./emulator @Nexus_5X_API_26 )'
alias https='http --default-scheme=https'

dotpreview() {
  mkdir -p /tmp/dotpreview
  local outfile=/tmp/dotpreview/$(basename "${1%.dot}").png
  echo "$outfile"
  dot -Tpng "$1" -o "$outfile" && op "$outfile"
}

r() {
  if (( $# == 0)); then
    echo "Please provide at least one argument"
  elif (( $# == 1)); then
    ag "$1"
  else
    ag -l "$1" | xargs -I@ sed -i "s^${1}^${2}^g; T; w /dev/stdout" @
  fi
}

alias alsowc='tee >(wc -l)'
alias alsocount='tee >(sort | uniq -c | sort -nr)'
for i in {1..9}; do
  alias col$i="awk '{print \$$i}'"
done

tmuxcolors() {
  for i in {0..255}; do
    (( $i % 8 == 0 )) && printf "\n"
    printf "\x1b[38;5;${i}m%-8s\x1b[0m    " "color${i}"
  done
  echo
}
