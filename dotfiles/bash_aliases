# Vim
type nvim 2> /dev/null > /dev/null && alias vim='nvim'

alias v='nvim'
alias vimrc='nvim ~/.config/nvim/init.vim'

# Tmux
type tmux-next 2> /dev/null > /dev/null && alias tmux='tmux-next -f "$HOME/.tmux.conf"'

# List
alias u='ls -FCBH --group-directories-first --color=auto --hide node_modules'
alias uu='u -A'
alias ur='u -R'

# fzf, ag and fpp
p() {
  local dir=$(ls -1 $P_DIR | fzf --select-1 --query "${1%/}")
  [ ! -z "$dir" ] && cd "$P_DIR/$dir"
}

vv() {
  # Open a direct path to a file
  if [ -f "$1" ]; then
    nvim "$1"

  # If a directory then open an index.* file if one exists
  elif [ -d "$1" ]; then
    if [ -f "$1"/index.* ]; then
      nvim "$1"/index.*
    else
      nvim "$1"
    fi

  # Otherwise use fzf to find the best matching file
  else
    local file=$(ag -g "" | fzf --select-1 --query "$1")
    if [ ! -z "$file" ]; then
      echo "nvim \"$file\"" && nvim "$file"
    fi
  fi
}

e() {
  # Go directly to any existing directory
  if [ -d "$1" ]; then
    cd "$1"

  # Otherwise use fzf to find the best matching directory
  else
    local dir=$(find . '(' \
      -path '*/.git' -o \
      -path '*/.hg' -o \
      -path '*/node_modules' -o \
      -path '*/build' -o \
      -path '*/dist' \
      ')' -prune -o \
      -not -path '*/.git' \
      -not -path '*/.hg' \
      -not -path '*/node_modules' \
      -not -path '*/build' \
      -not -path '*/dist' \
      -not -path '.' \
      -type d -print \
      | fzf --select-1 --query "$1")

    if [ ! -z "$dir" ]; then
      cd "$dir"
    fi
  fi
}

is_in_project_dir() {
  [ -f ./package.json -o -d ./node_modules -o -d ./.git -o -d ./.hg ] || return 1
}

is_in_home_dir() {
  [ "$PWD" = "$HOME" ] || return 1
}

is_in_root_dir() {
  [ "$PWD" = "/" ] || return 1
}

r() {
  local temp_OLDPWD=$PWD
  until is_in_project_dir || is_in_home_dir || is_in_root_dir; do
    cd ..
  done
  OLDPWD=$temp_OLDPWD
}

alias re='r && e'
alias rv='r && vv'

alias ag='ag --smart-case'

s() {
  ag --color "$@" | fpp
}

# Functions
mkcd() { mkdir "$@" && cd "$@"; }

mkalias() {
  # Flatten arguments into one string
  local full_string=$*

  # Extract the first and last parts
  local alias_name=${full_string%%=*}
  local alias_result=${full_string#*=}

  # Construct the new command
  local alias_command="alias $alias_name='$alias_result'"

  # Execute the command, if successful then print 
  # out the alias and add it to ~/.bash_aliases
  eval "$alias_command" && \
  alias "$alias_name" | tee -a "$HOME/.bash_aliases"
}

mkbash() {
  echo -e "#!/bin/bash\n\n" > "$1" && \
  chmod +x "$1" && \
  nvim + +startinsert "$1"
}

mkp() {
  [ -z "$1" ] && echo "Please enter a project name" && return
  [ -e "$P_DIR/$1" ] && "Project already exists: \"$P_DIR/$1\"" && return
  mkdir -p "$P_DIR/$1"
  cd "$P_DIR/$1"
  git init
}

mkpn() {
  mkp "$@" && \
  echo "node_modules/" > .gitignore && \
  npm init --yes
}

# Git
alias g='git'
alias gs='git status'
alias gc='git commit'
alias gl='git lg'
alias gd='git diff'
alias gaa='git add -A :/'
alias gaac='git add -A :/ && git commit'
alias gco='git checkout'
alias gm='git merge'
alias gpl='git pull'
alias gps='git push'
alias gpsa='git push --all'
alias gpsat='git push --all --follow-tags'

# cd shortcuts
alias up='cd ..'
alias back='cd -'
alias cdt='cd $TMP_DIR'
alias cdd='cd $DIARY_DIR'
alias cddb='cd $DBOX'

# Image resize and strip
alias stripjpg='exiftool -all= '
resize800() {
  stripjpg "$@" && \
  for f in "$@"; do
    convert "$f" -resize 800x "$f"
  done
}

# NPM
alias npmls='npm ls --depth=0'
alias nis='npm install --save'
alias nus='npm uninstall --save'
alias nisd='npm install --save-dev'
alias nusd='npm uninstall --save-dev'
alias nig='npm install -g'
alias nug='npm uninstall -g'
alias nr='npm run'
alias nverp='npm version patch'
alias nverm='npm version minor'
alias bnode='babel-node --presets es2015,react'

# Misc
alias dus='du -Dhs'
alias df='df -hT'
alias op='xdg-open'
alias mkdir='mkdir -p'
alias resolution='xdpyinfo | grep dimensions:'
removekernels() { sudo apt-get remove --purge $(dpkg -l 'linux-*' | sed '/^ii/!d;/'"$(uname -r | sed "s/\(.*\)-\([^0-9]\+\)/\1/")"'/d;s/^[^ ]* [^ ]* \([^ ]*\).*/\1/;/[0-9]/!d'); }
alias ins='sudo apt-get install'
alias uns='sudo apt-get remove'
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'
alias xclip='xclip -selection clipboard'
alias wrstats="grep '^m' ~/.workrave/historystats | rev | cut -d' ' -f 2 | rev | tail -n20"
alias gpgc='gpg -c --cipher-algo AES256'
vd() { ls "$@" | nvim -; }

# Aliases generated by mkalias
