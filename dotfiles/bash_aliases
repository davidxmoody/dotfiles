#!/usr/bin/env bash

# Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

p() {
  local chosen_dir=$(choose-project "$1")
  cd "$chosen_dir"
}

t() {
  local chosen_dir=$(choose-project-tmp "$1")
  cd "$chosen_dir"
}

mkcd() { mkdir "$@" && cd "$@"; }

mkalias() {
  local full_string=$*
  local alias_name=${full_string%%=*}
  local alias_result=${full_string#*=}
  local alias_command="alias $alias_name='$alias_result'"

  eval "$alias_command" && alias "$alias_name" | tee -a "$HOME/.bash_aliases"
}

mkp() {
  local new_project_path=$(mkproject "$@")
  [[ ! -z "$new_project_path" ]] && cd "$new_project_path"
}

alias mkt='mkp -t'

# Git ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

alias g='git'
alias gs='git status -sb -uall'
alias gc='git commit'
gl() {
  if git rev-parse @{u} 2> /dev/null 1> /dev/null; then
    git lg @ @{u} "$@"
  else
    git lg "$@"
  fi
}
alias glp='gl HEAD~20.. -p'
alias gls='gl HEAD~20.. --stat'
gS() { GIT_PAGER="less '+/$1'" git log -p -S "$1"; }
gG() { GIT_PAGER="less '+/$1'" git log -p -G "$1"; }
alias gd='git diff'
alias gdc='git diff --cached'
alias gdt='git diff --text'
ga() {
  if [[ $# == 0 ]]; then
    (
      cd "$(git rev-parse --show-toplevel)" &&
        git status -sb -uall |
        fzf --ansi --header-lines=1 --multi --preview='git diff {2}' |
          sed 's/^.. //' |
          xargs -d '\n' git add
    )
  else
    git add "$@"
  fi
}
alias gaa='git add -A :/'
alias gaac='gaa && git commit'
gcm() {
  local message="$*"
  local message_length="${#message}"
  if [[ "$message_length" -gt 50 ]]; then
    echo "Error: Message is $((message_length - 50)) characters too long" >&2
    return 1
  else
    git commit -m "$message"
  fi
}
alias gaacm='gaa && gcm'
alias gaaca='git add -A :/ && git commit --amend'
alias gaacane='git add -A :/ && git commit --amend --no-edit'
alias gco='git checkout'
alias gcop='git checkout -- package-lock.json'
alias gm='git merge'
alias gff='git merge --ff-only'
alias gf='git fetch origin --prune && git --no-pager lg @{upstream} ^HEAD'
alias gpl='git pull && git --no-pager lg HEAD@{1}..'
alias gps='git push'
alias gr='git rebase'
alias gri='git rebase -i @{u}'
alias gst='git stash'
alias gstu='git stash save -u'
alias gstp='git stash pop'
alias gsta='git stash apply'
alias gsts='git stash show -p'
alias gstd='git stash drop'
gsti() {
  (
    cd "$(git rev-parse --show-toplevel)" &&
      git status -sb -uall |
      fzf --ansi --header-lines=1 --multi --preview='git diff {2}' |
        sed 's/^.. //' |
        xargs -d '\n' git stash push --include-untracked --
  )
}
alias glm='git lg --author="$(git config user.name)"'
alias gdp='git diff ORIG_HEAD -- package.json'
alias groot='cd "$(git rev-parse --show-toplevel)"'
alias gitcountdiff='git --no-pager diff --color=never | grep -v -E "^(\+\+\+|---) "| grep -E "^(-|\+)" | count'
alias gitcopydiff='git --no-pager diff --color=never | tee >(pbcopy) && echo -e "\nCopied!"'
alias gitcopyhead='git --no-pager show --color=never | tee >(pbcopy) && echo -e "\nCopied!"'
alias gw='git show'
alias gwt='git show --text'
gwm() {
  local last_commit_hash=$(git log --max-count=1 --author="$(git config user.name)" --pretty=format:'%H')
  if [ -n "$last_commit_hash" ]; then
    git show "$last_commit_hash" "$@"
  else
    echo "Could not find any commits by author: $(git config user.name)" >&2
    return 1
  fi
}
alias gy='git-show-yesterday'
alias gyy='git-projects-recent-commits'
alias gg='git-fetch-all-projects'
alias gunl='git ls-files -v | grep ^h | col2'
alias guna='git update-index --assume-unchanged'
alias gunr='git update-index --no-assume-unchanged'

ggl() {
  (
    cd "$P_DIR"
    for gr in */.git; do
      local proj_dir="${gr%/.git}"
      cd "$P_DIR/$proj_dir"
      echo "$(git-short-status)	${proj_dir}" | expand -t8
    done
  )
}

gclone() {
  local git_repo=$1
  local project_dir=${2-p}
  [ -z "$git_repo" ] && echo "Please enter the name of a git repository" && return 1

  (
    cd "$HOME/${project_dir}" &&
      git clone git@bitbucket.org:candide-garden-app/${git_repo}.git
  ) && cd "$HOME/${project_dir}/${git_repo}"
}

fetch_repo_list() {
  curl https://api.github.com/users/davidxmoody/repos 2> /dev/null |
    jq -r '.[].name' > ~/.github-repos
}

clone() {
  if [ -z "$(find ~/.github-repos -mtime -3 2> /dev/null)" ]; then
    echo "Re-fetching repo list from GitHub..."
    fetch_repo_list
  fi

  local repo=$(cat ~/.github-repos | fzf --select-1 --query "$*")

  if [ -n "$repo" ]; then
    if [ ! -d "$P_DIR/$repo" ]; then
      git clone --config "user.email=david@davidxmoody.com" "git@github.com:davidxmoody/${repo}.git" "$P_DIR/$repo"
    fi

    cd "$P_DIR/$repo"
  fi
}

# npm ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

alias npmls='npm ls --depth=0'
alias ni='npm install'
alias nu='npm uninstall'
alias nid='npm install --save-dev'
alias nud='npm uninstall --save-dev'
alias nig='npm install -g'
alias nug='npm uninstall -g'
nit() { npm install --save-dev "@types/$1"; }
alias nr='npm-run-script'
alias ns='npm start'
alias nb='npm run build'
alias podi='([ -d ios ] && cd ios; pod install)'
alias npi='ni && podi'

alias publish='git push && npm publish'
alias ng='npm run generate-types'
alias ngd='npm run generate-db-types'

alias nc='npm-check -u'
alias tsw='tsc -w --noEmit'
nodei() { node -i -e "$(< "${1-/dev/null}")"; }

# Diary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

alias dn='diary new'
alias de='diary edit'
alias dl='diary list'
alias ds='diary search'

# Vim ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

alias vim='nvim'
alias v='nvim'
alias vv='(cd "$RC_DIR" && nvim dotfiles/config/nvim/init.lua)'
alias vb='(cd "$RC_DIR" && nvim dotfiles/bash_aliases)'
alias vbl='nvim ~/.bashrc-local'
alias vp='v package.json'
alias v-='v -'

# cd shortcuts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

alias up='cd ..'
alias b='cd - >/dev/null'
alias cdp='cd "$P_DIR"'
alias cdt='cd "$TMP_DIR"'
alias cdd='cd "$DIARY_DIR"'
alias cdl='cd ~/Downloads'
alias pd='p dotfiles'

# Data hacks ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

alias rgg='rg --files'
alias rgz='rgg --files | fzf | copywithoutnewline'
alias rgm='rg --multiline --multiline-dotall'
alias r='find-and-replace'
alias noheader='tail -n+2'
alias wcl='wc -l'
alias alsowc='tee >(wc -l)'
alias alsocount='tee >(sort | uniq -c | sort -nr)'
alias tolower='tr "[:upper:]" "[:lower:]"'
alias toupper='tr "[:lower:]" "[:upper:]"'
for i in {1..9}; do alias col$i="awk '{print \$$i}'"; done
alias sortlength="awk '{print length, \$0}' | sort -n | cut -d ' ' -f2-"
alias tojsonarray='jq -R | jq --slurp'

# Shortcuts to custom-scripts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

alias ff='prettier-changed'
alias brewi='brew-install-fzf'
alias brewu='brew-upgrade-fzf'
alias ta='tmux-attach-fzf'

# Misc ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

alias u='ls -FCBH --group-directories-first --color=auto --hide node_modules'
alias uu='u -A'
alias dus='du -Dhs'
alias dud='du -s * | sort -nr'
alias op='open'
alias mkdir='mkdir -p'
alias echopath='echo $PATH | sed "s/:/\n/g"'
alias echomanpath='echo $MANPATH | sed "s/:/\n/g"'
alias tsize='echo "$(tput cols)x$(tput lines)"'
alias watchtsize='while true; do tsize; sleep 0.1; done | uniq'
alias copywithoutnewline='tr -d \\n | pbcopy'
alias copyuuid='uuidgen | tr "[:upper:]" "[:lower:]" | copywithoutnewline'
alias py='python3'
alias timestamps="gawk '{ print strftime(\"[%Y-%m-%d %H:%M:%S]\"), \$0 }'"
alias tree='tree -I "node_modules|package-lock.json"'
https-proxy() { http-server /dev/null -p 443 --ssl --cert "$LOCAL_SSL_CERT" --key "$LOCAL_SSL_KEY" -P http://localhost:${1-4000}; }
alias tnode='node --no-warnings --loader ts-node/esm --es-module-specifier-resolution=node'
