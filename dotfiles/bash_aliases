# Vim
type nvim 2> /dev/null > /dev/null && alias vim='nvim'

alias v='nvim'
alias vimrc='nvim ~/.config/nvim/init.vim'
alias vba='nvim ~/.bash_aliases'

# Tmux
type tmux-next 2> /dev/null > /dev/null && alias tmux='tmux-next -f "$HOME/.tmux.conf"'

# List
alias u='ls -FCBH --group-directories-first --color=auto --hide node_modules'
alias uu='u -A'
alias ur='u -R'

# FZF
p() {
  local initial_dir=${1%/}
  if [ ! -z "$initial_dir" -a -d "$P_DIR/$initial_dir" ]; then
    cd "$P_DIR/$initial_dir"
  else
    local chosen_dir=$(ls -1 $P_DIR | fzf --select-1 --query "$initial_dir")
    [ ! -z "$chosen_dir" ] && cd "$P_DIR/$chosen_dir"
  fi
}

vv() {
  # Open a direct path to a file
  if [ -f "$1" ]; then
    nvim "$1"

  # If a directory then open an index.* file if one exists
  elif [ -d "$1" ]; then
    if [ -f "$1"/index.* ]; then
      nvim "$1"/index.*
    else
      nvim "$1"
    fi

  # Otherwise use fzf to find the best matching file
  else
    local file=$(ag -g "" | fzf --select-1 --query "$1")
    if [ ! -z "$file" ]; then
      echo "nvim \"$file\"" && nvim "$file"
    fi
  fi
}

e() {
  # Go directly to any existing directory
  if [ -d "$1" ]; then
    cd "$1"

  # Otherwise use fzf to find the best matching directory
  else
    local dir=$(find . '(' \
      -path '*/.git' -o \
      -path '*/.hg' -o \
      -path '*/node_modules' -o \
      -path '*/build' -o \
      -path '*/dist' \
      ')' -prune -o \
      -not -path '*/.git' \
      -not -path '*/.hg' \
      -not -path '*/node_modules' \
      -not -path '*/build' \
      -not -path '*/dist' \
      -not -path '.' \
      -type d -print \
      | fzf --select-1 --query "$1")

    if [ ! -z "$dir" ]; then
      cd "$dir"
    fi
  fi
}

is_in_project_dir() {
  [ -f ./package.json -o -d ./node_modules -o -d ./.git -o -d ./.hg ] || return 1
}

is_in_home_dir() {
  [ "$PWD" = "$HOME" ] || return 1
}

is_in_root_dir() {
  [ "$PWD" = "/" ] || return 1
}

r() {
  local temp_OLDPWD=$PWD
  until is_in_project_dir || is_in_home_dir || is_in_root_dir; do
    cd ..
  done
  OLDPWD=$temp_OLDPWD
}

alias re='r && e'
alias rv='r && vv'

# Functions
mkcd() { mkdir "$@" && cd "$@"; }

mkalias() {
  # Flatten arguments into one string
  local full_string=$*

  # Extract the first and last parts
  local alias_name=${full_string%%=*}
  local alias_result=${full_string#*=}

  # Construct the new command
  local alias_command="alias $alias_name='$alias_result'"

  # Execute the command, if successful then print 
  # out the alias and add it to ~/.bash_aliases
  eval "$alias_command" && \
  alias "$alias_name" | tee -a "$HOME/.bash_aliases"
}

mkbash() {
  echo -e "#!/bin/bash\n\n" > "$1" && \
  chmod +x "$1" && \
  nvim + +startinsert "$1"
}

mkp() {
  [ -z "$1" ] && echo "Please enter a project name" && return
  [ -e "$P_DIR/$1" ] && "Project already exists: \"$P_DIR/$1\"" && return
  mkdir -p "$P_DIR/$1"
  cd "$P_DIR/$1"
  git init
}

mkpn() {
  mkp "$@" && \
  echo "node_modules/" > .gitignore && \
  npm init --yes
}

# Git
alias g='git'
alias gs='git status'
alias gc='git commit --verbose'
alias gl='git lg'
alias gd='git diff'
alias ga='git add'
alias gap='git add -p'
alias gaa='git add -A :/'
alias gaac='git add -A :/ && git commit --verbose'
alias gco='git checkout'
alias gcm='git checkout master'
alias gm='git merge'
alias gf='git fetch origin --prune && git --no-pager lg @{upstream} ^HEAD; echo'
alias gpl='git pull'
alias gps='git push'
alias gpsa='git push --all'
alias gpsat='git push --all --follow-tags'
alias gr='git rebase'
alias gst='git stash'
alias gstu='git stash save -u'
alias gstp='git stash pop'
alias gsta='git stash apply'
alias gstl='git stash list'
alias gplr='git pull --rebase'
alias glm='git lg --author="David Moody"'

cpgithooks() {
  for gh_dir in resources/git*hooks; do
    [ -d "$gh_dir" ] && cp -v "$gh_dir"/* ".git/hooks"
  done
}

morning() {
  for proj in ~/p/*; do
    if [ -d "$proj/.git" ]; then
      if cd "$proj" && git fetch --quiet; then
        local commits_behind=$(git rev-list --count HEAD..@{upstream} 2>/dev/null)
        local padded_commits_behind=$(printf '%3s' "$commits_behind")
        [[ "$commits_behind" -gt 0 ]] && echo "${padded_commits_behind} ${proj#~/p/}"
      else
        echo -e "\e[0;31m  !\e[0m ${proj#~/p/}"
      fi
    fi
  done
}

# cd shortcuts
alias up='cd ..'
alias upp='cd ../..'
alias uppp='cd ../../..'
alias b='cd -'
alias back='cd -'
alias cdp='cd $P_DIR'
alias cdt='cd $TMP_DIR'
alias cdd='cd $DIARY_DIR'
alias cddb='cd $DBOX'

# Image resize and strip
alias stripjpg='exiftool -all= '
resize800() {
  stripjpg "$@" && \
  for f in "$@"; do
    convert "$f" -resize 800x "$f"
  done
}

# NPM
alias npmls='npm ls --depth=0'
alias nis='npm install --save'
alias nus='npm uninstall --save'
alias nisd='npm install --save-dev'
alias nusd='npm uninstall --save-dev'
alias nig='npm install -g'
alias nug='npm uninstall -g'
alias nr='npm run'
alias nverp='npm version patch'
alias nverm='npm version minor'
alias bnode='babel-node --presets es2015,react'
alias nc='npm-check -u'

# Misc
alias dus='du -Dhs'
alias df='df -hT'
alias op='xdg-open'
alias mkdir='mkdir -p'
alias resolution='xdpyinfo | grep dimensions:'
removekernels() { sudo apt-get remove --purge $(dpkg -l 'linux-*' | sed '/^ii/!d;/'"$(uname -r | sed "s/\(.*\)-\([^0-9]\+\)/\1/")"'/d;s/^[^ ]* [^ ]* \([^ ]*\).*/\1/;/[0-9]/!d'); }
alias ins='sudo apt-get install'
alias uns='sudo apt-get remove'
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'
alias xclip='xclip -selection clipboard'
alias wrstats="grep '^m' ~/.workrave/historystats | rev | cut -d' ' -f 2 | rev | tail -n20"
alias gpgc='gpg -c --cipher-algo AES256'
whatuses() {
  cat ~/p/mft-repo-explorer/sample-output.json | \
    ramda -o table --compact "filter prop '$1'" "map prop '$1'" "map replace(/^.*#/, '')"
}
alias weather='curl http://wttr.in/Bristol'
alias f='fg'
alias stopmongoandredis='sudo service mongodb stop && sudo service redis-server stop'
alias mhenvi='npm i -g @mft/mh-dev-environment'
alias ag='ag --smart-case'

# Aliases generated by mkalias
