# Vim
type nvim 2> /dev/null > /dev/null && alias vim='nvim'
alias v='nvim'

# Tmux
if type tmux-next 2> /dev/null > /dev/null; then
  alias tmux='tmux-next -f "$HOME/.tmux.conf"'
else
  alias tmux='tmux -f "$HOME/.tmux.conf"'
fi

# List
alias u='ls -FCBH --group-directories-first --color=auto --hide node_modules'
alias uu='u -A'
alias ur='u -R'

# FZF
p() {
  local initial_dir=${1%/}
  if [ ! -z "$initial_dir" -a -d "$P_DIR/$initial_dir" ]; then
    cd "$P_DIR/$initial_dir" && tmux rename-window "$initial_dir"
  else
    local chosen_dir=$(ls -1 $P_DIR | fzf --select-1 --query "$initial_dir")
    [ ! -z "$chosen_dir" ] && cd "$P_DIR/$chosen_dir" && tmux rename-window "$chosen_dir"
  fi
}

vv() {
  # Open a direct path to a file
  if [ -f "$1" ]; then
    nvim "$1"

  # If a directory then open an index.* file if one exists
  elif [ -d "$1" ]; then
    if [ -f "$1"/index.* ]; then
      nvim "$1"/index.*
    else
      nvim "$1"
    fi

  # Otherwise use fzf to find the best matching file
  else
    local file=$(ag -g "" | fzf --select-1 --query "$1")
    if [ ! -z "$file" ]; then
      echo "nvim \"$file\"" && nvim "$file"
    fi
  fi
}

vd() {
  # Spawn a subshell so that nvim starts in the right directory
  (
    cd $RC_DIR
    local file=$(ag -g "" | fzf --select-1 --query "$1")
    [ ! -z "$file" ] && nvim "$file"
  )
}

e() {
  # Go directly to any existing directory
  if [ -d "$1" ]; then
    cd "$1"

  # Otherwise use fzf to find the best matching directory
  else
    local dir=$(find . '(' \
      -path '*/.git' -o \
      -path '*/.hg' -o \
      -path '*/node_modules' -o \
      -path '*/build' -o \
      -path '*/dist' \
      ')' -prune -o \
      -not -path '*/.git' \
      -not -path '*/.hg' \
      -not -path '*/node_modules' \
      -not -path '*/build' \
      -not -path '*/dist' \
      -not -path '.' \
      -type d -print \
      | fzf --select-1 --query "$1")

    if [ ! -z "$dir" ]; then
      cd "$dir"
    fi
  fi
}

# Functions
mkcd() { mkdir "$@" && cd "$@"; }

mkalias() {
  # Flatten arguments into one string
  local full_string=$*

  # Extract the first and last parts
  local alias_name=${full_string%%=*}
  local alias_result=${full_string#*=}

  # Construct the new command
  local alias_command="alias $alias_name='$alias_result'"

  # Execute the command, if successful then print 
  # out the alias and add it to ~/.bash_aliases
  eval "$alias_command" && \
  alias "$alias_name" | tee -a "$HOME/.bash_aliases"
}

mkbash() {
  echo -e "#!/bin/bash\n\n" > "$1" && \
  chmod +x "$1" && \
  nvim + +startinsert "$1"
}

mkp() {
  if [ -z "$1" ]; then
    echo "Error: Please enter a project name"
    return 1
  fi

  if [ -e "$P_DIR/$1" ]; then
    echo "Error: Project already exists: \"$P_DIR/$1\""
    return 1
  fi

  mkdir -p "$P_DIR/$1"
  cd "$P_DIR/$1"
  git init
}

mkpn() {
  mkp "$@" && \
  echo "node_modules/" > .gitignore && \
  npm init --yes
}

# Git
alias g='git'
alias gs='git status'
alias gc='git commit'
alias gl='git lg'
alias gd='git diff'
alias gdc='git diff --cached'
alias ga='git add'
alias gaa='git add -A :/'
alias gaac='git add -A :/ && git commit'
gaacm() { git add -A :/ && git commit -m "$*"; }
alias gaaca='git add -A :/ && git commit --amend'
alias gaacane='git add -A :/ && git commit --amend --no-edit'
alias gco='git checkout'
alias gcm='git checkout master'
alias gm='git merge'
alias gf='git fetch origin --prune && git --no-pager lg @{upstream} ^HEAD'
alias gpl='git pull && git --no-pager lg HEAD@{1}..'
alias gps='git push'
alias gpsa='git push --all'
alias gpsat='git push --all --follow-tags'
alias gr='git rebase'
alias gst='git stash'
alias gstu='git stash save -u'
alias gstp='git stash pop'
alias gsta='git stash apply'
alias gstl='git stash list'
alias gplr='git pull --rebase'
alias glm='git lg --author="David Moody"'
alias gdp='git diff ORIG_HEAD -- package.json'
alias gg='git_fetch_projects'
alias r='cd "$(git rev-parse --show-toplevel)"'

gclone() {
  local git_repo=$1
  local project_dir=${2-p}
  [ -z "$git_repo" ] && echo "Please enter the name of a git repository" && return 1

  (
    cd "$HOME/${project_dir}" && \
      git clone git@bitbucket.org:yourwealth/${git_repo}.git
  ) && cd "$HOME/${project_dir}/${git_repo}"
}

cpgithooks() {
  for gh_dir in resources/git*hooks; do
    [ -d "$gh_dir" ] && cp -v "$gh_dir"/* ".git/hooks"
  done
}

# cd shortcuts
alias up='cd ..'
alias upp='cd ../..'
alias uppp='cd ../../..'
alias b='cd -'
alias cdp='cd $P_DIR'
alias cdt='cd $TMP_DIR'
alias cdd='cd $DIARY_DIR'
alias cddb='cd $DBOX'

# Image resize and strip
alias stripjpg='exiftool -all= '
resize800() {
  stripjpg "$@" && \
  for f in "$@"; do
    convert "$f" -resize 800x "$f"
  done
}

# NPM
alias npmls='npm ls --depth=0'
alias nis='npm install --save'
alias nus='npm uninstall --save'
alias nisd='npm install --save-dev'
alias nusd='npm uninstall --save-dev'
alias nig='npm install -g'
alias nug='npm uninstall -g'
alias nr='npm run'
alias ns='npm start'
alias nverp='npm version patch'
alias nverm='npm version minor'
alias nc='npm-check -u'

# Misc
alias dus='du -Dhs'
alias dun='du -Ds node_modules/{@*/*,*} | sort -nr'
alias df='df -hT'
alias op='xdg-open'
alias mkdir='mkdir -p'
removekernels() { sudo apt-get remove --purge $(dpkg -l 'linux-*' | sed '/^ii/!d;/'"$(uname -r | sed "s/\(.*\)-\([^0-9]\+\)/\1/")"'/d;s/^[^ ]* [^ ]* \([^ ]*\).*/\1/;/[0-9]/!d'); }
alias ins='sudo apt-get install'
alias uns='sudo apt-get remove'
alias xclip='xclip -selection clipboard'
alias getclip='xclip -selection clipboard -o'
alias wrstats="grep '^m' ~/.workrave/historystats | rev | cut -d' ' -f 2 | rev | tail -n20"
alias gpgc='gpg -c --cipher-algo AES256'
alias f='fg'
alias stopmongoredisandnginx='sudo service mongodb stop && sudo service redis-server stop && sudo service nginx stop'
alias ag='ag --smart-case'
alias rg='rg --smart-case'
alias ports='netstat -tulpn'
alias count='sort | uniq -c | sort -nr'
alias get_github_repos='curl https://api.github.com/users/davidxmoody/repos | ramda "map pick([\name, \description, \ssh_url])" > ~/.github-repos.json'
alias cleanupdocker='docker rmi $(docker images -qf dangling=true)'
alias ubuntuversion='lsb_release -a'
alias restartwifi='sudo service network-manager restart'
alias echopath='echo $PATH | sed "s/:/\n/g"'
alias x='exit'

goo() {
  local query=$(echo -n $* | sed 's:%:%25:g; s: :%20:g; s:<:%3C:g; s:>:%3E:g; s:#:%23:g; s:{:%7B:g; s:}:%7D:g; s:|:%7C:g; s:\\:%5C:g; s:\^:%5E:g; s:~:%7E:g; s:\[:%5B:g; s:\]:%5D:g; s:`:%60:g; s:;:%3B:g; s:/:%2F:g; s:?:%3F:g; s^:^%3A^g; s:@:%40:g; s:=:%3D:g; s:&:%26:g; s:\$:%24:g; s:\!:%21:g; s:\*:%2A:g')
  xdg-open "https://www.google.co.uk/search?q=${query}" >/dev/null 2>/dev/null
}

analysegit() {
  python ~/p/git-of-theseus/analyze.py \
    --cohortfm=%Y-%m \
    --ignore='*.csv' \
    --ignore='*.eot' \
    --ignore='*.hbs' \
    --ignore='*.html' \
    --ignore='*.jpg' \
    --ignore='*.md' \
    --ignore='*.opts' \
    --ignore='*.png' \
    --ignore='*.rdb' \
    --ignore='*.sh' \
    --ignore='*.svg' \
    --ignore='*.ttf' \
    --ignore='*.txt' \
    --ignore='*.woff' \
    --ignore='*.woff2' \
    --ignore='*.xml' \
    --ignore='*.yml' \
    --ignore='*.orig' \
    .
}

analysegitexts() {
  python ~/p/git-of-theseus/stack_plot.py ./exts.json
}

analysegitcohorts() {
  python ~/p/git-of-theseus/stack_plot.py ./cohorts.json
}

analysegitsurvival() {
  python ~/p/git-of-theseus/survival_plot.py ./survival.json
}

# Aliases generated by mkalias
alias nb='npm run build'
alias ni='npm install'
