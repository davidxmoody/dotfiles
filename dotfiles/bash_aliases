# Vim
type nvim 2> /dev/null > /dev/null && alias vim='nvim'
alias v='nvim'
alias vv='nvim -c "Files!"'
alias vd='nvim -c "cd $RC_DIR" -c "Files!"'

# Tmux
if type tmux-next 2> /dev/null > /dev/null; then
  alias tmux='tmux-next -f "$HOME/.tmux.conf"'
else
  alias tmux='tmux -f "$HOME/.tmux.conf"'
fi

# List
alias u='ls -FCBH --group-directories-first --color=auto --hide node_modules'
alias uu='u -A'
alias ur='u -R'

# Functions
p() {
  local initial_dir=${1%/}
  if [ ! -z "$initial_dir" -a -d "$P_DIR/$initial_dir" ]; then
    cd "$P_DIR/$initial_dir"
  else
    local chosen_dir=$(ls -1 $P_DIR | fzf --select-1 --query "$initial_dir")
    [ ! -z "$chosen_dir" ] && cd "$P_DIR/$chosen_dir"
  fi
}

mkcd() { mkdir "$@" && cd "$@"; }

mkalias() {
  # Flatten arguments into one string
  local full_string=$*

  # Extract the first and last parts
  local alias_name=${full_string%%=*}
  local alias_result=${full_string#*=}

  # Construct the new command
  local alias_command="alias $alias_name='$alias_result'"

  # Execute the command, if successful then print
  # out the alias and add it to ~/.bash_aliases
  eval "$alias_command" && \
  alias "$alias_name" | tee -a "$HOME/.bash_aliases"
}

mkbash() {
  echo -e "#!/bin/bash\n\n" > "$1" && \
  chmod +x "$1" && \
  nvim + +startinsert "$1"
}

mkp() {
  if [ -z "$1" ]; then
    echo "Error: Please enter a project name"
    return 1
  fi

  if [ -e "$P_DIR/$1" ]; then
    echo "Error: Project already exists: \"$P_DIR/$1\""
    return 1
  fi

  mkdir -p "$P_DIR/$1"
  cd "$P_DIR/$1"
  git init
}

mkpn() {
  mkp "$@" && \
  echo "node_modules/" > .gitignore && \
  npm init --yes
}

# Git
alias g='git'
alias gs='git status'
alias gc='git commit'
gl() {
  if git rev-parse @{u} 2>/dev/null 1>/dev/null; then
    git lg @ @{u} "$@"
  else
    git lg "$@"
  fi
}
alias gd='git diff'
alias gdc='git diff --cached'
alias ga='git add'
alias gaa='git add -A :/'
alias gaac='git add -A :/ && git commit'
gaacm() { git add -A :/ && git commit -m "$*"; }
alias gaaca='git add -A :/ && git commit --amend'
alias gaacane='git add -A :/ && git commit --amend --no-edit'
alias gco='git checkout'
alias gcop='git checkout --patch'
alias gcm='git checkout master'
alias gm='git merge'
alias gf='git fetch origin --prune && git --no-pager lg @{upstream} ^HEAD'
alias gpl='git pull && git --no-pager lg HEAD@{1}..'
alias gps='git push'
alias gpsa='git push --all'
alias gpsat='git push --all --follow-tags'
alias gr='git rebase'
alias gri='git rebase -i @{u}'
alias gst='git stash'
alias gstu='git stash save -u'
alias gstp='git stash pop'
alias gsta='git stash apply'
alias gsts='git stash show -p'
alias gstd='git stash drop'
alias glm='git lg --author="David Moody"'
alias gdp='git diff ORIG_HEAD -- package.json'
alias r='cd "$(git rev-parse --show-toplevel)"'

gg() {
  local dir=${1-$P_DIR}
  dir=${dir%/}

  echo "$dir"/*/.git | \
    sed 's/\/.git \?/\n/g' | \
    xargs -n1 -P0 git_fetch_project
}

gclone() {
  local git_repo=$1
  local project_dir=${2-p}
  [ -z "$git_repo" ] && echo "Please enter the name of a git repository" && return 1

  (
    cd "$HOME/${project_dir}" && \
      git clone git@bitbucket.org:yourwealth/${git_repo}.git
  ) && cd "$HOME/${project_dir}/${git_repo}"
}

fetch_repo_list() {
  curl https://api.github.com/users/davidxmoody/repos 2>/dev/null | \
    ramda --unslurp "pluck('name')" | \
    sed 's/"//g' > ~/.github-repos
}

clone() {
  if [ -z "$(find ~/.github-repos -mtime -3 2>/dev/null)" ]; then
    echo "Re-fetching repo list from GitHub..."
    fetch_repo_list
  fi

  local repo=$(cat ~/.github-repos | fzf --select-1 --query "$*")

  if [ -n "$repo" ]; then
    if [ ! -d "$P_DIR/$repo" ]; then
      git clone --config "user.email=david@davidxmoody.com" "git@github.com:davidxmoody/${repo}.git" "$P_DIR/$repo"
    fi

    cd "$P_DIR/$repo"
  fi
}

# cd shortcuts
alias up='cd ..'
alias upp='cd ../..'
alias uppp='cd ../../..'
alias b='cd -'
alias cdp='cd $P_DIR'
alias cdt='cd $TMP_DIR'
alias cdd='cd $DIARY_DIR'
alias cddb='cd $DBOX'

# Image resize and strip
alias stripjpg='exiftool -all= '
resize800() {
  stripjpg "$@" && \
  for f in "$@"; do
    convert "$f" -resize 800x "$f"
  done
}

# NPM
alias npmls='npm ls --depth=0'
alias nis='npm install --save'
alias nus='npm uninstall --save'
alias nisd='npm install --save-dev'
alias nusd='npm uninstall --save-dev'
alias nig='npm install -g'
alias nug='npm uninstall -g'
alias nr='npm run'
alias ns='npm start'
alias nb='npm run build'
alias nverp='npm version patch'
alias nverm='npm version minor'
alias nc='npm-check -u'

# Misc
alias x='exit'
alias f='fg'
alias ag='ag --smart-case'
alias dus='du -Dhs'
alias dun='du -Ds node_modules/{@*/*,*} | sort -nr'
alias df='df -hT'
alias op='xdg-open'
alias mkdir='mkdir -p'
removekernels() { sudo apt-get remove --purge $(dpkg -l 'linux-*' | sed '/^ii/!d;/'"$(uname -r | sed "s/\(.*\)-\([^0-9]\+\)/\1/")"'/d;s/^[^ ]* [^ ]* \([^ ]*\).*/\1/;/[0-9]/!d'); }
alias ins='sudo apt-get install'
alias uns='sudo apt-get remove'
alias xclip='xclip -selection clipboard'
alias getclip='xclip -selection clipboard -o'
alias wrstats="grep '^m' ~/.workrave/historystats | rev | cut -d' ' -f 2 | rev | tail -n20"
alias gpgc='gpg -c --cipher-algo AES256'
alias stopmongoredisandnginx='sudo service mongodb stop && sudo service redis-server stop && sudo service nginx stop'
alias ports='netstat -tulpn'
alias count='sort | uniq -c | sort -nr'
alias cleanupdocker='docker rmi $(docker images -qf dangling=true)'
alias ubuntuversion='lsb_release -a'
alias restartwifi='sudo service network-manager restart'
alias echopath='echo $PATH | sed "s/:/\n/g"'
alias mochaw='./node_modules/.bin/_mocha -w'
alias diary='~/sync/old-projects/diary/rundiary -b $DIARY_DIR'

# Aliases generated by mkalias
